#if TOOLS
using Godot;
using System;

[Tool]
public class TiledImporterPlugin : EditorPlugin
{
    public override void _EnterTree()
    {
        Base64Decoder decoder = new Base64Decoder();
        var str = "THE harder Tom tried to fasten his mind on his book, the more his ideas wandered. So at last, with a sigh and a yawn, he gave it up. It seemed to him that the noon recess would never come. The air was utterly dead. There was not a breath stirring. It was the sleepiest of sleepy days. The drowsing murmur of the five and twenty studying scholars soothed the soul like the spell that is in the murmur of bees. Away off in the flaming sunshine, Cardiff Hill lifted its soft green sides through a shimmering veil of heat, tinted with the purple of distance; a few birds floated on lazy wing high in the air; no other living thing was visible but some cows, and they were asleep. Tom’s heart ached to be free, or else to have something of interest to do to pass the dreary time. His hand wandered into his pocket and his face lit up with a glow of gratitude that was prayer, though he did not know it. Then furtively the percussion-cap box came out. He released the tick and put him on the long flat desk. The creature probably glowed with a gratitude that amounted to prayer, too, at this moment, but it was premature: for when he started thankfully to travel off, Tom turned him aside with a pin and made him take a new direction.

Tom’s bosom friend sat next him, suffering just as Tom had been, and now he was deeply and gratefully interested in this entertainment in an instant. This bosom friend was Joe Harper. The two boys were sworn friends all the week, and embattled enemies on Saturdays. Joe took a pin out of his lapel and began to assist in exercising the prisoner. The sport grew in interest momently. Soon Tom said that they were interfering with each other, and neither getting the fullest benefit of the tick. So he put Joe’s slate on the desk and drew a line down the middle of it from top to bottom.

“Now,” said he, “as long as he is on your side you can stir him up and I’ll let him alone; but if you let him get away and get on my side, you’re to leave him alone as long as I can keep him from crossing over.”

“All right, go ahead; start him up.”

The tick escaped from Tom, presently, and crossed the equator. Joe harassed him awhile, and then he got away and crossed back again. This change of base occurred often. While one boy was worrying the tick with absorbing interest, the other would look on with interest as strong, the two heads bowed together over the slate, and the two souls dead to all things else. At last luck seemed to settle and abide with Joe. The tick tried this, that, and the other course, and got as excited and as anxious as the boys themselves, but time and again just as he would have victory in his very grasp, so to speak, and Tom’s fingers would be twitching to begin, Joe’s pin would deftly head him off, and keep possession. At last Tom could stand it no longer. The temptation was too strong. So he reached out and lent a hand with his pin. Joe was angry in a moment. Said he:

“Tom, you let him alone.”

“I only just want to stir him up a little, Joe.”

“No, sir, it ain’t fair; you just let him alone.”

“Blame it, I ain’t going to stir him much.”

“Let him alone, I tell you.”

“I won’t!”

“You shall—he’s on my side of the line.”

“Look here, Joe Harper, whose is that tick?”

“I don’t care whose tick he is—he’s on my side of the line, and you sha’n’t touch him.”

“Well, I’ll just bet I will, though. He’s my tick and I’ll do what I blame please with him, or die!”

A tremendous whack came down on Tom’s shoulders, and its duplicate on Joe’s; and for the space of two minutes the dust continued to fly from the two jackets and the whole school to enjoy it. The boys had been too absorbed to notice the hush that had stolen upon the school awhile before when the master came tiptoeing down the room and stood over them. He had contemplated a good part of the performance before he contributed his bit of variety to it.

When school broke up at noon, Tom flew to Becky Thatcher, and whispered in her ear:

“Put on your bonnet and let on you’re going home; and when you get to the corner, give the rest of ’em the slip, and turn down through the lane and come back. I’ll go the other way and come it over ’em the same way.”

So the one went off with one group of scholars, and the other with another. In a little while the two met at the bottom of the lane, and when they reached the school they had it all to themselves. Then they sat together, with a slate before them, and Tom gave Becky the pencil and held her hand in his, guiding it, and so created another surprising house. When the interest in art began to wane, the two fell to talking. Tom was swimming in bliss. He said:

“Do you love rats?”

“No! I hate them!”

“Well, I do, too—live ones. But I mean dead ones, to swing round your head with a string.”

“No, I don’t care for rats much, anyway. What I like is chewing-gum.”

“Oh, I should say so! I wish I had some now.”

“Do you? I’ve got some. I’ll let you chew it awhile, but you must give it back to me.”

That was agreeable, so they chewed it turn about, and dangled their legs against the bench in excess of contentment.

“Was you ever at a circus?” said Tom.

“Yes, and my pa’s going to take me again some time, if I’m good.”

“I been to the circus three or four times—lots of times. Church ain’t shucks to a circus. There’s things going on at a circus all the time. I’m going to be a clown in a circus when I grow up.”

“Oh, are you! That will be nice. They’re so lovely, all spotted up.”

“Yes, that’s so. And they get slathers of money—most a dollar a day, Ben Rogers says. Say, Becky, was you ever engaged?”

“What’s that?”

“Why, engaged to be married.”

“No.”

“Would you like to?”

“I reckon so. I don’t know. What is it like?”

“Like? Why it ain’t like anything. You only just tell a boy you won’t ever have anybody but him, ever ever ever, and then you kiss and that’s all. Anybody can do it.”

“Kiss? What do you kiss for?”

“Why, that, you know, is to—well, they always do that.”

“Everybody?”

“Why, yes, everybody that’s in love with each other. Do you remember what I wrote on the slate?”

“Ye—yes.”

“What was it?”

“I sha’n’t tell you.”

“Shall I tell you?”

“Ye—yes—but some other time.”

“No, now.”

“No, not now—to-morrow.”

“Oh, no, now. Please, Becky—I’ll whisper it, I’ll whisper it ever so easy.”

Becky hesitating, Tom took silence for consent, and passed his arm about her waist and whispered the tale ever so softly, with his mouth close to her ear. And then he added:

“Now you whisper it to me—just the same.”

She resisted, for a while, and then said:

“You turn your face away so you can’t see, and then I will. But you mustn’t ever tell anybody—will you, Tom? Now you won’t, will you?”

“No, indeed, indeed I won’t. Now, Becky.”

He turned his face away. She bent timidly around till her breath stirred his curls and whispered, “I—love—you!”

Then she sprang away and ran around and around the desks and benches, with Tom after her, and took refuge in a corner at last, with her little white apron to her face. Tom clasped her about her neck and pleaded:

“Now, Becky, it’s all done—all over but the kiss. Don’t you be afraid of that—it ain’t anything at all. Please, Becky.” And he tugged at her apron and the hands.

By and by she gave up, and let her hands drop; her face, all glowing with the struggle, came up and submitted. Tom kissed the red lips and said:

“Now it’s all done, Becky. And always after this, you know, you ain’t ever to love anybody but me, and you ain’t ever to marry anybody but me, ever never and forever. Will you?”

“No, I’ll never love anybody but you, Tom, and I’ll never marry anybody but you—and you ain’t to ever marry anybody but me, either.”

“Certainly. Of course. That’s part of it. And always coming to school or when we’re going home, you’re to walk with me, when there ain’t anybody looking—and you choose me and I choose you at parties, because that’s the way you do when you’re engaged.”

“It’s so nice. I never heard of it before.”

“Oh, it’s ever so gay! Why, me and Amy Lawrence—”

The big eyes told Tom his blunder and he stopped, confused.

“Oh, Tom! Then I ain’t the first you’ve ever been engaged to!”

The child began to cry. Tom said:

“Oh, don’t cry, Becky, I don’t care for her any more.”

“Yes, you do, Tom—you know you do.”
THE harder Tom tried to fasten his mind on his book, the more his ideas wandered. So at last, with a sigh and a yawn, he gave it up. It seemed to him that the noon recess would never come. The air was utterly dead. There was not a breath stirring. It was the sleepiest of sleepy days. The drowsing murmur of the five and twenty studying scholars soothed the soul like the spell that is in the murmur of bees. Away off in the flaming sunshine, Cardiff Hill lifted its soft green sides through a shimmering veil of heat, tinted with the purple of distance; a few birds floated on lazy wing high in the air; no other living thing was visible but some cows, and they were asleep. Tom’s heart ached to be free, or else to have something of interest to do to pass the dreary time. His hand wandered into his pocket and his face lit up with a glow of gratitude that was prayer, though he did not know it. Then furtively the percussion-cap box came out. He released the tick and put him on the long flat desk. The creature probably glowed with a gratitude that amounted to prayer, too, at this moment, but it was premature: for when he started thankfully to travel off, Tom turned him aside with a pin and made him take a new direction.

Tom’s bosom friend sat next him, suffering just as Tom had been, and now he was deeply and gratefully interested in this entertainment in an instant. This bosom friend was Joe Harper. The two boys were sworn friends all the week, and embattled enemies on Saturdays. Joe took a pin out of his lapel and began to assist in exercising the prisoner. The sport grew in interest momently. Soon Tom said that they were interfering with each other, and neither getting the fullest benefit of the tick. So he put Joe’s slate on the desk and drew a line down the middle of it from top to bottom.

“Now,” said he, “as long as he is on your side you can stir him up and I’ll let him alone; but if you let him get away and get on my side, you’re to leave him alone as long as I can keep him from crossing over.”

“All right, go ahead; start him up.”

The tick escaped from Tom, presently, and crossed the equator. Joe harassed him awhile, and then he got away and crossed back again. This change of base occurred often. While one boy was worrying the tick with absorbing interest, the other would look on with interest as strong, the two heads bowed together over the slate, and the two souls dead to all things else. At last luck seemed to settle and abide with Joe. The tick tried this, that, and the other course, and got as excited and as anxious as the boys themselves, but time and again just as he would have victory in his very grasp, so to speak, and Tom’s fingers would be twitching to begin, Joe’s pin would deftly head him off, and keep possession. At last Tom could stand it no longer. The temptation was too strong. So he reached out and lent a hand with his pin. Joe was angry in a moment. Said he:

“Tom, you let him alone.”

“I only just want to stir him up a little, Joe.”

“No, sir, it ain’t fair; you just let him alone.”

“Blame it, I ain’t going to stir him much.”

“Let him alone, I tell you.”

“I won’t!”

“You shall—he’s on my side of the line.”

“Look here, Joe Harper, whose is that tick?”

“I don’t care whose tick he is—he’s on my side of the line, and you sha’n’t touch him.”

“Well, I’ll just bet I will, though. He’s my tick and I’ll do what I blame please with him, or die!”

A tremendous whack came down on Tom’s shoulders, and its duplicate on Joe’s; and for the space of two minutes the dust continued to fly from the two jackets and the whole school to enjoy it. The boys had been too absorbed to notice the hush that had stolen upon the school awhile before when the master came tiptoeing down the room and stood over them. He had contemplated a good part of the performance before he contributed his bit of variety to it.

When school broke up at noon, Tom flew to Becky Thatcher, and whispered in her ear:

“Put on your bonnet and let on you’re going home; and when you get to the corner, give the rest of ’em the slip, and turn down through the lane and come back. I’ll go the other way and come it over ’em the same way.”

So the one went off with one group of scholars, and the other with another. In a little while the two met at the bottom of the lane, and when they reached the school they had it all to themselves. Then they sat together, with a slate before them, and Tom gave Becky the pencil and held her hand in his, guiding it, and so created another surprising house. When the interest in art began to wane, the two fell to talking. Tom was swimming in bliss. He said:

“Do you love rats?”

“No! I hate them!”

“Well, I do, too—live ones. But I mean dead ones, to swing round your head with a string.”

“No, I don’t care for rats much, anyway. What I like is chewing-gum.”

“Oh, I should say so! I wish I had some now.”

“Do you? I’ve got some. I’ll let you chew it awhile, but you must give it back to me.”

That was agreeable, so they chewed it turn about, and dangled their legs against the bench in excess of contentment.

“Was you ever at a circus?” said Tom.

“Yes, and my pa’s going to take me again some time, if I’m good.”

“I been to the circus three or four times—lots of times. Church ain’t shucks to a circus. There’s things going on at a circus all the time. I’m going to be a clown in a circus when I grow up.”

“Oh, are you! That will be nice. They’re so lovely, all spotted up.”

“Yes, that’s so. And they get slathers of money—most a dollar a day, Ben Rogers says. Say, Becky, was you ever engaged?”

“What’s that?”

“Why, engaged to be married.”

“No.”

“Would you like to?”

“I reckon so. I don’t know. What is it like?”

“Like? Why it ain’t like anything. You only just tell a boy you won’t ever have anybody but him, ever ever ever, and then you kiss and that’s all. Anybody can do it.”

“Kiss? What do you kiss for?”

“Why, that, you know, is to—well, they always do that.”

“Everybody?”

“Why, yes, everybody that’s in love with each other. Do you remember what I wrote on the slate?”

“Ye—yes.”

“What was it?”

“I sha’n’t tell you.”

“Shall I tell you?”

“Ye—yes—but some other time.”

“No, now.”

“No, not now—to-morrow.”

“Oh, no, now. Please, Becky—I’ll whisper it, I’ll whisper it ever so easy.”

Becky hesitating, Tom took silence for consent, and passed his arm about her waist and whispered the tale ever so softly, with his mouth close to her ear. And then he added:

“Now you whisper it to me—just the same.”

She resisted, for a while, and then said:

“You turn your face away so you can’t see, and then I will. But you mustn’t ever tell anybody—will you, Tom? Now you won’t, will you?”

“No, indeed, indeed I won’t. Now, Becky.”

He turned his face away. She bent timidly around till her breath stirred his curls and whispered, “I—love—you!”

Then she sprang away and ran around and around the desks and benches, with Tom after her, and took refuge in a corner at last, with her little white apron to her face. Tom clasped her about her neck and pleaded:

“Now, Becky, it’s all done—all over but the kiss. Don’t you be afraid of that—it ain’t anything at all. Please, Becky.” And he tugged at her apron and the hands.

By and by she gave up, and let her hands drop; her face, all glowing with the struggle, came up and submitted. Tom kissed the red lips and said:

“Now it’s all done, Becky. And always after this, you know, you ain’t ever to love anybody but me, and you ain’t ever to marry anybody but me, ever never and forever. Will you?”

“No, I’ll never love anybody but you, Tom, and I’ll never marry anybody but you—and you ain’t to ever marry anybody but me, either.”

“Certainly. Of course. That’s part of it. And always coming to school or when we’re going home, you’re to walk with me, when there ain’t anybody looking—and you choose me and I choose you at parties, because that’s the way you do when you’re engaged.”

“It’s so nice. I never heard of it before.”

“Oh, it’s ever so gay! Why, me and Amy Lawrence—”

The big eyes told Tom his blunder and he stopped, confused.

“Oh, Tom! Then I ain’t the first you’ve ever been engaged to!”

The child began to cry. Tom said:

“Oh, don’t cry, Becky, I don’t care for her any more.”

“Yes, you do, Tom—you know you do.”
THE harder Tom tried to fasten his mind on his book, the more his ideas wandered. So at last, with a sigh and a yawn, he gave it up. It seemed to him that the noon recess would never come. The air was utterly dead. There was not a breath stirring. It was the sleepiest of sleepy days. The drowsing murmur of the five and twenty studying scholars soothed the soul like the spell that is in the murmur of bees. Away off in the flaming sunshine, Cardiff Hill lifted its soft green sides through a shimmering veil of heat, tinted with the purple of distance; a few birds floated on lazy wing high in the air; no other living thing was visible but some cows, and they were asleep. Tom’s heart ached to be free, or else to have something of interest to do to pass the dreary time. His hand wandered into his pocket and his face lit up with a glow of gratitude that was prayer, though he did not know it. Then furtively the percussion-cap box came out. He released the tick and put him on the long flat desk. The creature probably glowed with a gratitude that amounted to prayer, too, at this moment, but it was premature: for when he started thankfully to travel off, Tom turned him aside with a pin and made him take a new direction.

Tom’s bosom friend sat next him, suffering just as Tom had been, and now he was deeply and gratefully interested in this entertainment in an instant. This bosom friend was Joe Harper. The two boys were sworn friends all the week, and embattled enemies on Saturdays. Joe took a pin out of his lapel and began to assist in exercising the prisoner. The sport grew in interest momently. Soon Tom said that they were interfering with each other, and neither getting the fullest benefit of the tick. So he put Joe’s slate on the desk and drew a line down the middle of it from top to bottom.

“Now,” said he, “as long as he is on your side you can stir him up and I’ll let him alone; but if you let him get away and get on my side, you’re to leave him alone as long as I can keep him from crossing over.”

“All right, go ahead; start him up.”

The tick escaped from Tom, presently, and crossed the equator. Joe harassed him awhile, and then he got away and crossed back again. This change of base occurred often. While one boy was worrying the tick with absorbing interest, the other would look on with interest as strong, the two heads bowed together over the slate, and the two souls dead to all things else. At last luck seemed to settle and abide with Joe. The tick tried this, that, and the other course, and got as excited and as anxious as the boys themselves, but time and again just as he would have victory in his very grasp, so to speak, and Tom’s fingers would be twitching to begin, Joe’s pin would deftly head him off, and keep possession. At last Tom could stand it no longer. The temptation was too strong. So he reached out and lent a hand with his pin. Joe was angry in a moment. Said he:

“Tom, you let him alone.”

“I only just want to stir him up a little, Joe.”

“No, sir, it ain’t fair; you just let him alone.”

“Blame it, I ain’t going to stir him much.”

“Let him alone, I tell you.”

“I won’t!”

“You shall—he’s on my side of the line.”

“Look here, Joe Harper, whose is that tick?”

“I don’t care whose tick he is—he’s on my side of the line, and you sha’n’t touch him.”

“Well, I’ll just bet I will, though. He’s my tick and I’ll do what I blame please with him, or die!”

A tremendous whack came down on Tom’s shoulders, and its duplicate on Joe’s; and for the space of two minutes the dust continued to fly from the two jackets and the whole school to enjoy it. The boys had been too absorbed to notice the hush that had stolen upon the school awhile before when the master came tiptoeing down the room and stood over them. He had contemplated a good part of the performance before he contributed his bit of variety to it.

When school broke up at noon, Tom flew to Becky Thatcher, and whispered in her ear:

“Put on your bonnet and let on you’re going home; and when you get to the corner, give the rest of ’em the slip, and turn down through the lane and come back. I’ll go the other way and come it over ’em the same way.”

So the one went off with one group of scholars, and the other with another. In a little while the two met at the bottom of the lane, and when they reached the school they had it all to themselves. Then they sat together, with a slate before them, and Tom gave Becky the pencil and held her hand in his, guiding it, and so created another surprising house. When the interest in art began to wane, the two fell to talking. Tom was swimming in bliss. He said:

“Do you love rats?”

“No! I hate them!”

“Well, I do, too—live ones. But I mean dead ones, to swing round your head with a string.”

“No, I don’t care for rats much, anyway. What I like is chewing-gum.”

“Oh, I should say so! I wish I had some now.”

“Do you? I’ve got some. I’ll let you chew it awhile, but you must give it back to me.”

That was agreeable, so they chewed it turn about, and dangled their legs against the bench in excess of contentment.

“Was you ever at a circus?” said Tom.

“Yes, and my pa’s going to take me again some time, if I’m good.”

“I been to the circus three or four times—lots of times. Church ain’t shucks to a circus. There’s things going on at a circus all the time. I’m going to be a clown in a circus when I grow up.”

“Oh, are you! That will be nice. They’re so lovely, all spotted up.”

“Yes, that’s so. And they get slathers of money—most a dollar a day, Ben Rogers says. Say, Becky, was you ever engaged?”

“What’s that?”

“Why, engaged to be married.”

“No.”

“Would you like to?”

“I reckon so. I don’t know. What is it like?”

“Like? Why it ain’t like anything. You only just tell a boy you won’t ever have anybody but him, ever ever ever, and then you kiss and that’s all. Anybody can do it.”

“Kiss? What do you kiss for?”

“Why, that, you know, is to—well, they always do that.”

“Everybody?”

“Why, yes, everybody that’s in love with each other. Do you remember what I wrote on the slate?”

“Ye—yes.”

“What was it?”

“I sha’n’t tell you.”

“Shall I tell you?”

“Ye—yes—but some other time.”

“No, now.”

“No, not now—to-morrow.”

“Oh, no, now. Please, Becky—I’ll whisper it, I’ll whisper it ever so easy.”

Becky hesitating, Tom took silence for consent, and passed his arm about her waist and whispered the tale ever so softly, with his mouth close to her ear. And then he added:

“Now you whisper it to me—just the same.”

She resisted, for a while, and then said:

“You turn your face away so you can’t see, and then I will. But you mustn’t ever tell anybody—will you, Tom? Now you won’t, will you?”

“No, indeed, indeed I won’t. Now, Becky.”

He turned his face away. She bent timidly around till her breath stirred his curls and whispered, “I—love—you!”

Then she sprang away and ran around and around the desks and benches, with Tom after her, and took refuge in a corner at last, with her little white apron to her face. Tom clasped her about her neck and pleaded:

“Now, Becky, it’s all done—all over but the kiss. Don’t you be afraid of that—it ain’t anything at all. Please, Becky.” And he tugged at her apron and the hands.

By and by she gave up, and let her hands drop; her face, all glowing with the struggle, came up and submitted. Tom kissed the red lips and said:

“Now it’s all done, Becky. And always after this, you know, you ain’t ever to love anybody but me, and you ain’t ever to marry anybody but me, ever never and forever. Will you?”

“No, I’ll never love anybody but you, Tom, and I’ll never marry anybody but you—and you ain’t to ever marry anybody but me, either.”

“Certainly. Of course. That’s part of it. And always coming to school or when we’re going home, you’re to walk with me, when there ain’t anybody looking—and you choose me and I choose you at parties, because that’s the way you do when you’re engaged.”

“It’s so nice. I never heard of it before.”

“Oh, it’s ever so gay! Why, me and Amy Lawrence—”

The big eyes told Tom his blunder and he stopped, confused.

“Oh, Tom! Then I ain’t the first you’ve ever been engaged to!”

The child began to cry. Tom said:

“Oh, don’t cry, Becky, I don’t care for her any more.”

“Yes, you do, Tom—you know you do.”
THE harder Tom tried to fasten his mind on his book, the more his ideas wandered. So at last, with a sigh and a yawn, he gave it up. It seemed to him that the noon recess would never come. The air was utterly dead. There was not a breath stirring. It was the sleepiest of sleepy days. The drowsing murmur of the five and twenty studying scholars soothed the soul like the spell that is in the murmur of bees. Away off in the flaming sunshine, Cardiff Hill lifted its soft green sides through a shimmering veil of heat, tinted with the purple of distance; a few birds floated on lazy wing high in the air; no other living thing was visible but some cows, and they were asleep. Tom’s heart ached to be free, or else to have something of interest to do to pass the dreary time. His hand wandered into his pocket and his face lit up with a glow of gratitude that was prayer, though he did not know it. Then furtively the percussion-cap box came out. He released the tick and put him on the long flat desk. The creature probably glowed with a gratitude that amounted to prayer, too, at this moment, but it was premature: for when he started thankfully to travel off, Tom turned him aside with a pin and made him take a new direction.

Tom’s bosom friend sat next him, suffering just as Tom had been, and now he was deeply and gratefully interested in this entertainment in an instant. This bosom friend was Joe Harper. The two boys were sworn friends all the week, and embattled enemies on Saturdays. Joe took a pin out of his lapel and began to assist in exercising the prisoner. The sport grew in interest momently. Soon Tom said that they were interfering with each other, and neither getting the fullest benefit of the tick. So he put Joe’s slate on the desk and drew a line down the middle of it from top to bottom.

“Now,” said he, “as long as he is on your side you can stir him up and I’ll let him alone; but if you let him get away and get on my side, you’re to leave him alone as long as I can keep him from crossing over.”

“All right, go ahead; start him up.”

The tick escaped from Tom, presently, and crossed the equator. Joe harassed him awhile, and then he got away and crossed back again. This change of base occurred often. While one boy was worrying the tick with absorbing interest, the other would look on with interest as strong, the two heads bowed together over the slate, and the two souls dead to all things else. At last luck seemed to settle and abide with Joe. The tick tried this, that, and the other course, and got as excited and as anxious as the boys themselves, but time and again just as he would have victory in his very grasp, so to speak, and Tom’s fingers would be twitching to begin, Joe’s pin would deftly head him off, and keep possession. At last Tom could stand it no longer. The temptation was too strong. So he reached out and lent a hand with his pin. Joe was angry in a moment. Said he:

“Tom, you let him alone.”

“I only just want to stir him up a little, Joe.”

“No, sir, it ain’t fair; you just let him alone.”

“Blame it, I ain’t going to stir him much.”

“Let him alone, I tell you.”

“I won’t!”

“You shall—he’s on my side of the line.”

“Look here, Joe Harper, whose is that tick?”

“I don’t care whose tick he is—he’s on my side of the line, and you sha’n’t touch him.”

“Well, I’ll just bet I will, though. He’s my tick and I’ll do what I blame please with him, or die!”

A tremendous whack came down on Tom’s shoulders, and its duplicate on Joe’s; and for the space of two minutes the dust continued to fly from the two jackets and the whole school to enjoy it. The boys had been too absorbed to notice the hush that had stolen upon the school awhile before when the master came tiptoeing down the room and stood over them. He had contemplated a good part of the performance before he contributed his bit of variety to it.

When school broke up at noon, Tom flew to Becky Thatcher, and whispered in her ear:

“Put on your bonnet and let on you’re going home; and when you get to the corner, give the rest of ’em the slip, and turn down through the lane and come back. I’ll go the other way and come it over ’em the same way.”

So the one went off with one group of scholars, and the other with another. In a little while the two met at the bottom of the lane, and when they reached the school they had it all to themselves. Then they sat together, with a slate before them, and Tom gave Becky the pencil and held her hand in his, guiding it, and so created another surprising house. When the interest in art began to wane, the two fell to talking. Tom was swimming in bliss. He said:

“Do you love rats?”

“No! I hate them!”

“Well, I do, too—live ones. But I mean dead ones, to swing round your head with a string.”

“No, I don’t care for rats much, anyway. What I like is chewing-gum.”

“Oh, I should say so! I wish I had some now.”

“Do you? I’ve got some. I’ll let you chew it awhile, but you must give it back to me.”

That was agreeable, so they chewed it turn about, and dangled their legs against the bench in excess of contentment.

“Was you ever at a circus?” said Tom.

“Yes, and my pa’s going to take me again some time, if I’m good.”

“I been to the circus three or four times—lots of times. Church ain’t shucks to a circus. There’s things going on at a circus all the time. I’m going to be a clown in a circus when I grow up.”

“Oh, are you! That will be nice. They’re so lovely, all spotted up.”

“Yes, that’s so. And they get slathers of money—most a dollar a day, Ben Rogers says. Say, Becky, was you ever engaged?”

“What’s that?”

“Why, engaged to be married.”

“No.”

“Would you like to?”

“I reckon so. I don’t know. What is it like?”

“Like? Why it ain’t like anything. You only just tell a boy you won’t ever have anybody but him, ever ever ever, and then you kiss and that’s all. Anybody can do it.”

“Kiss? What do you kiss for?”

“Why, that, you know, is to—well, they always do that.”

“Everybody?”

“Why, yes, everybody that’s in love with each other. Do you remember what I wrote on the slate?”

“Ye—yes.”

“What was it?”

“I sha’n’t tell you.”

“Shall I tell you?”

“Ye—yes—but some other time.”

“No, now.”

“No, not now—to-morrow.”

“Oh, no, now. Please, Becky—I’ll whisper it, I’ll whisper it ever so easy.”

Becky hesitating, Tom took silence for consent, and passed his arm about her waist and whispered the tale ever so softly, with his mouth close to her ear. And then he added:

“Now you whisper it to me—just the same.”

She resisted, for a while, and then said:

“You turn your face away so you can’t see, and then I will. But you mustn’t ever tell anybody—will you, Tom? Now you won’t, will you?”

“No, indeed, indeed I won’t. Now, Becky.”

He turned his face away. She bent timidly around till her breath stirred his curls and whispered, “I—love—you!”

Then she sprang away and ran around and around the desks and benches, with Tom after her, and took refuge in a corner at last, with her little white apron to her face. Tom clasped her about her neck and pleaded:

“Now, Becky, it’s all done—all over but the kiss. Don’t you be afraid of that—it ain’t anything at all. Please, Becky.” And he tugged at her apron and the hands.

By and by she gave up, and let her hands drop; her face, all glowing with the struggle, came up and submitted. Tom kissed the red lips and said:

“Now it’s all done, Becky. And always after this, you know, you ain’t ever to love anybody but me, and you ain’t ever to marry anybody but me, ever never and forever. Will you?”

“No, I’ll never love anybody but you, Tom, and I’ll never marry anybody but you—and you ain’t to ever marry anybody but me, either.”

“Certainly. Of course. That’s part of it. And always coming to school or when we’re going home, you’re to walk with me, when there ain’t anybody looking—and you choose me and I choose you at parties, because that’s the way you do when you’re engaged.”

“It’s so nice. I never heard of it before.”

“Oh, it’s ever so gay! Why, me and Amy Lawrence—”

The big eyes told Tom his blunder and he stopped, confused.

“Oh, Tom! Then I ain’t the first you’ve ever been engaged to!”

The child began to cry. Tom said:

“Oh, don’t cry, Becky, I don’t care for her any more.”

“Yes, you do, Tom—you know you do.”
THE harder Tom tried to fasten his mind on his book, the more his ideas wandered. So at last, with a sigh and a yawn, he gave it up. It seemed to him that the noon recess would never come. The air was utterly dead. There was not a breath stirring. It was the sleepiest of sleepy days. The drowsing murmur of the five and twenty studying scholars soothed the soul like the spell that is in the murmur of bees. Away off in the flaming sunshine, Cardiff Hill lifted its soft green sides through a shimmering veil of heat, tinted with the purple of distance; a few birds floated on lazy wing high in the air; no other living thing was visible but some cows, and they were asleep. Tom’s heart ached to be free, or else to have something of interest to do to pass the dreary time. His hand wandered into his pocket and his face lit up with a glow of gratitude that was prayer, though he did not know it. Then furtively the percussion-cap box came out. He released the tick and put him on the long flat desk. The creature probably glowed with a gratitude that amounted to prayer, too, at this moment, but it was premature: for when he started thankfully to travel off, Tom turned him aside with a pin and made him take a new direction.

Tom’s bosom friend sat next him, suffering just as Tom had been, and now he was deeply and gratefully interested in this entertainment in an instant. This bosom friend was Joe Harper. The two boys were sworn friends all the week, and embattled enemies on Saturdays. Joe took a pin out of his lapel and began to assist in exercising the prisoner. The sport grew in interest momently. Soon Tom said that they were interfering with each other, and neither getting the fullest benefit of the tick. So he put Joe’s slate on the desk and drew a line down the middle of it from top to bottom.

“Now,” said he, “as long as he is on your side you can stir him up and I’ll let him alone; but if you let him get away and get on my side, you’re to leave him alone as long as I can keep him from crossing over.”

“All right, go ahead; start him up.”

The tick escaped from Tom, presently, and crossed the equator. Joe harassed him awhile, and then he got away and crossed back again. This change of base occurred often. While one boy was worrying the tick with absorbing interest, the other would look on with interest as strong, the two heads bowed together over the slate, and the two souls dead to all things else. At last luck seemed to settle and abide with Joe. The tick tried this, that, and the other course, and got as excited and as anxious as the boys themselves, but time and again just as he would have victory in his very grasp, so to speak, and Tom’s fingers would be twitching to begin, Joe’s pin would deftly head him off, and keep possession. At last Tom could stand it no longer. The temptation was too strong. So he reached out and lent a hand with his pin. Joe was angry in a moment. Said he:

“Tom, you let him alone.”

“I only just want to stir him up a little, Joe.”

“No, sir, it ain’t fair; you just let him alone.”

“Blame it, I ain’t going to stir him much.”

“Let him alone, I tell you.”

“I won’t!”

“You shall—he’s on my side of the line.”

“Look here, Joe Harper, whose is that tick?”

“I don’t care whose tick he is—he’s on my side of the line, and you sha’n’t touch him.”

“Well, I’ll just bet I will, though. He’s my tick and I’ll do what I blame please with him, or die!”

A tremendous whack came down on Tom’s shoulders, and its duplicate on Joe’s; and for the space of two minutes the dust continued to fly from the two jackets and the whole school to enjoy it. The boys had been too absorbed to notice the hush that had stolen upon the school awhile before when the master came tiptoeing down the room and stood over them. He had contemplated a good part of the performance before he contributed his bit of variety to it.

When school broke up at noon, Tom flew to Becky Thatcher, and whispered in her ear:

“Put on your bonnet and let on you’re going home; and when you get to the corner, give the rest of ’em the slip, and turn down through the lane and come back. I’ll go the other way and come it over ’em the same way.”

So the one went off with one group of scholars, and the other with another. In a little while the two met at the bottom of the lane, and when they reached the school they had it all to themselves. Then they sat together, with a slate before them, and Tom gave Becky the pencil and held her hand in his, guiding it, and so created another surprising house. When the interest in art began to wane, the two fell to talking. Tom was swimming in bliss. He said:

“Do you love rats?”

“No! I hate them!”

“Well, I do, too—live ones. But I mean dead ones, to swing round your head with a string.”

“No, I don’t care for rats much, anyway. What I like is chewing-gum.”

“Oh, I should say so! I wish I had some now.”

“Do you? I’ve got some. I’ll let you chew it awhile, but you must give it back to me.”

That was agreeable, so they chewed it turn about, and dangled their legs against the bench in excess of contentment.

“Was you ever at a circus?” said Tom.

“Yes, and my pa’s going to take me again some time, if I’m good.”

“I been to the circus three or four times—lots of times. Church ain’t shucks to a circus. There’s things going on at a circus all the time. I’m going to be a clown in a circus when I grow up.”

“Oh, are you! That will be nice. They’re so lovely, all spotted up.”

“Yes, that’s so. And they get slathers of money—most a dollar a day, Ben Rogers says. Say, Becky, was you ever engaged?”

“What’s that?”

“Why, engaged to be married.”

“No.”

“Would you like to?”

“I reckon so. I don’t know. What is it like?”

“Like? Why it ain’t like anything. You only just tell a boy you won’t ever have anybody but him, ever ever ever, and then you kiss and that’s all. Anybody can do it.”

“Kiss? What do you kiss for?”

“Why, that, you know, is to—well, they always do that.”

“Everybody?”

“Why, yes, everybody that’s in love with each other. Do you remember what I wrote on the slate?”

“Ye—yes.”

“What was it?”

“I sha’n’t tell you.”

“Shall I tell you?”

“Ye—yes—but some other time.”

“No, now.”

“No, not now—to-morrow.”

“Oh, no, now. Please, Becky—I’ll whisper it, I’ll whisper it ever so easy.”

Becky hesitating, Tom took silence for consent, and passed his arm about her waist and whispered the tale ever so softly, with his mouth close to her ear. And then he added:

“Now you whisper it to me—just the same.”

She resisted, for a while, and then said:

“You turn your face away so you can’t see, and then I will. But you mustn’t ever tell anybody—will you, Tom? Now you won’t, will you?”

“No, indeed, indeed I won’t. Now, Becky.”

He turned his face away. She bent timidly around till her breath stirred his curls and whispered, “I—love—you!”

Then she sprang away and ran around and around the desks and benches, with Tom after her, and took refuge in a corner at last, with her little white apron to her face. Tom clasped her about her neck and pleaded:

“Now, Becky, it’s all done—all over but the kiss. Don’t you be afraid of that—it ain’t anything at all. Please, Becky.” And he tugged at her apron and the hands.

By and by she gave up, and let her hands drop; her face, all glowing with the struggle, came up and submitted. Tom kissed the red lips and said:

“Now it’s all done, Becky. And always after this, you know, you ain’t ever to love anybody but me, and you ain’t ever to marry anybody but me, ever never and forever. Will you?”

“No, I’ll never love anybody but you, Tom, and I’ll never marry anybody but you—and you ain’t to ever marry anybody but me, either.”

“Certainly. Of course. That’s part of it. And always coming to school or when we’re going home, you’re to walk with me, when there ain’t anybody looking—and you choose me and I choose you at parties, because that’s the way you do when you’re engaged.”

“It’s so nice. I never heard of it before.”

“Oh, it’s ever so gay! Why, me and Amy Lawrence—”

The big eyes told Tom his blunder and he stopped, confused.

“Oh, Tom! Then I ain’t the first you’ve ever been engaged to!”

The child began to cry. Tom said:

“Oh, don’t cry, Becky, I don’t care for her any more.”

“Yes, you do, Tom—you know you do.”
THE harder Tom tried to fasten his mind on his book, the more his ideas wandered. So at last, with a sigh and a yawn, he gave it up. It seemed to him that the noon recess would never come. The air was utterly dead. There was not a breath stirring. It was the sleepiest of sleepy days. The drowsing murmur of the five and twenty studying scholars soothed the soul like the spell that is in the murmur of bees. Away off in the flaming sunshine, Cardiff Hill lifted its soft green sides through a shimmering veil of heat, tinted with the purple of distance; a few birds floated on lazy wing high in the air; no other living thing was visible but some cows, and they were asleep. Tom’s heart ached to be free, or else to have something of interest to do to pass the dreary time. His hand wandered into his pocket and his face lit up with a glow of gratitude that was prayer, though he did not know it. Then furtively the percussion-cap box came out. He released the tick and put him on the long flat desk. The creature probably glowed with a gratitude that amounted to prayer, too, at this moment, but it was premature: for when he started thankfully to travel off, Tom turned him aside with a pin and made him take a new direction.

Tom’s bosom friend sat next him, suffering just as Tom had been, and now he was deeply and gratefully interested in this entertainment in an instant. This bosom friend was Joe Harper. The two boys were sworn friends all the week, and embattled enemies on Saturdays. Joe took a pin out of his lapel and began to assist in exercising the prisoner. The sport grew in interest momently. Soon Tom said that they were interfering with each other, and neither getting the fullest benefit of the tick. So he put Joe’s slate on the desk and drew a line down the middle of it from top to bottom.

“Now,” said he, “as long as he is on your side you can stir him up and I’ll let him alone; but if you let him get away and get on my side, you’re to leave him alone as long as I can keep him from crossing over.”

“All right, go ahead; start him up.”

The tick escaped from Tom, presently, and crossed the equator. Joe harassed him awhile, and then he got away and crossed back again. This change of base occurred often. While one boy was worrying the tick with absorbing interest, the other would look on with interest as strong, the two heads bowed together over the slate, and the two souls dead to all things else. At last luck seemed to settle and abide with Joe. The tick tried this, that, and the other course, and got as excited and as anxious as the boys themselves, but time and again just as he would have victory in his very grasp, so to speak, and Tom’s fingers would be twitching to begin, Joe’s pin would deftly head him off, and keep possession. At last Tom could stand it no longer. The temptation was too strong. So he reached out and lent a hand with his pin. Joe was angry in a moment. Said he:

“Tom, you let him alone.”

“I only just want to stir him up a little, Joe.”

“No, sir, it ain’t fair; you just let him alone.”

“Blame it, I ain’t going to stir him much.”

“Let him alone, I tell you.”

“I won’t!”

“You shall—he’s on my side of the line.”

“Look here, Joe Harper, whose is that tick?”

“I don’t care whose tick he is—he’s on my side of the line, and you sha’n’t touch him.”

“Well, I’ll just bet I will, though. He’s my tick and I’ll do what I blame please with him, or die!”

A tremendous whack came down on Tom’s shoulders, and its duplicate on Joe’s; and for the space of two minutes the dust continued to fly from the two jackets and the whole school to enjoy it. The boys had been too absorbed to notice the hush that had stolen upon the school awhile before when the master came tiptoeing down the room and stood over them. He had contemplated a good part of the performance before he contributed his bit of variety to it.

When school broke up at noon, Tom flew to Becky Thatcher, and whispered in her ear:

“Put on your bonnet and let on you’re going home; and when you get to the corner, give the rest of ’em the slip, and turn down through the lane and come back. I’ll go the other way and come it over ’em the same way.”

So the one went off with one group of scholars, and the other with another. In a little while the two met at the bottom of the lane, and when they reached the school they had it all to themselves. Then they sat together, with a slate before them, and Tom gave Becky the pencil and held her hand in his, guiding it, and so created another surprising house. When the interest in art began to wane, the two fell to talking. Tom was swimming in bliss. He said:

“Do you love rats?”

“No! I hate them!”

“Well, I do, too—live ones. But I mean dead ones, to swing round your head with a string.”

“No, I don’t care for rats much, anyway. What I like is chewing-gum.”

“Oh, I should say so! I wish I had some now.”

“Do you? I’ve got some. I’ll let you chew it awhile, but you must give it back to me.”

That was agreeable, so they chewed it turn about, and dangled their legs against the bench in excess of contentment.

“Was you ever at a circus?” said Tom.

“Yes, and my pa’s going to take me again some time, if I’m good.”

“I been to the circus three or four times—lots of times. Church ain’t shucks to a circus. There’s things going on at a circus all the time. I’m going to be a clown in a circus when I grow up.”

“Oh, are you! That will be nice. They’re so lovely, all spotted up.”

“Yes, that’s so. And they get slathers of money—most a dollar a day, Ben Rogers says. Say, Becky, was you ever engaged?”

“What’s that?”

“Why, engaged to be married.”

“No.”

“Would you like to?”

“I reckon so. I don’t know. What is it like?”

“Like? Why it ain’t like anything. You only just tell a boy you won’t ever have anybody but him, ever ever ever, and then you kiss and that’s all. Anybody can do it.”

“Kiss? What do you kiss for?”

“Why, that, you know, is to—well, they always do that.”

“Everybody?”

“Why, yes, everybody that’s in love with each other. Do you remember what I wrote on the slate?”

“Ye—yes.”

“What was it?”

“I sha’n’t tell you.”

“Shall I tell you?”

“Ye—yes—but some other time.”

“No, now.”

“No, not now—to-morrow.”

“Oh, no, now. Please, Becky—I’ll whisper it, I’ll whisper it ever so easy.”

Becky hesitating, Tom took silence for consent, and passed his arm about her waist and whispered the tale ever so softly, with his mouth close to her ear. And then he added:

“Now you whisper it to me—just the same.”

She resisted, for a while, and then said:

“You turn your face away so you can’t see, and then I will. But you mustn’t ever tell anybody—will you, Tom? Now you won’t, will you?”

“No, indeed, indeed I won’t. Now, Becky.”

He turned his face away. She bent timidly around till her breath stirred his curls and whispered, “I—love—you!”

Then she sprang away and ran around and around the desks and benches, with Tom after her, and took refuge in a corner at last, with her little white apron to her face. Tom clasped her about her neck and pleaded:

“Now, Becky, it’s all done—all over but the kiss. Don’t you be afraid of that—it ain’t anything at all. Please, Becky.” And he tugged at her apron and the hands.

By and by she gave up, and let her hands drop; her face, all glowing with the struggle, came up and submitted. Tom kissed the red lips and said:

“Now it’s all done, Becky. And always after this, you know, you ain’t ever to love anybody but me, and you ain’t ever to marry anybody but me, ever never and forever. Will you?”

“No, I’ll never love anybody but you, Tom, and I’ll never marry anybody but you—and you ain’t to ever marry anybody but me, either.”

“Certainly. Of course. That’s part of it. And always coming to school or when we’re going home, you’re to walk with me, when there ain’t anybody looking—and you choose me and I choose you at parties, because that’s the way you do when you’re engaged.”

“It’s so nice. I never heard of it before.”

“Oh, it’s ever so gay! Why, me and Amy Lawrence—”

The big eyes told Tom his blunder and he stopped, confused.

“Oh, Tom! Then I ain’t the first you’ve ever been engaged to!”

The child began to cry. Tom said:

“Oh, don’t cry, Becky, I don’t care for her any more.”

“Yes, you do, Tom—you know you do.”
THE harder Tom tried to fasten his mind on his book, the more his ideas wandered. So at last, with a sigh and a yawn, he gave it up. It seemed to him that the noon recess would never come. The air was utterly dead. There was not a breath stirring. It was the sleepiest of sleepy days. The drowsing murmur of the five and twenty studying scholars soothed the soul like the spell that is in the murmur of bees. Away off in the flaming sunshine, Cardiff Hill lifted its soft green sides through a shimmering veil of heat, tinted with the purple of distance; a few birds floated on lazy wing high in the air; no other living thing was visible but some cows, and they were asleep. Tom’s heart ached to be free, or else to have something of interest to do to pass the dreary time. His hand wandered into his pocket and his face lit up with a glow of gratitude that was prayer, though he did not know it. Then furtively the percussion-cap box came out. He released the tick and put him on the long flat desk. The creature probably glowed with a gratitude that amounted to prayer, too, at this moment, but it was premature: for when he started thankfully to travel off, Tom turned him aside with a pin and made him take a new direction.

Tom’s bosom friend sat next him, suffering just as Tom had been, and now he was deeply and gratefully interested in this entertainment in an instant. This bosom friend was Joe Harper. The two boys were sworn friends all the week, and embattled enemies on Saturdays. Joe took a pin out of his lapel and began to assist in exercising the prisoner. The sport grew in interest momently. Soon Tom said that they were interfering with each other, and neither getting the fullest benefit of the tick. So he put Joe’s slate on the desk and drew a line down the middle of it from top to bottom.

“Now,” said he, “as long as he is on your side you can stir him up and I’ll let him alone; but if you let him get away and get on my side, you’re to leave him alone as long as I can keep him from crossing over.”

“All right, go ahead; start him up.”

The tick escaped from Tom, presently, and crossed the equator. Joe harassed him awhile, and then he got away and crossed back again. This change of base occurred often. While one boy was worrying the tick with absorbing interest, the other would look on with interest as strong, the two heads bowed together over the slate, and the two souls dead to all things else. At last luck seemed to settle and abide with Joe. The tick tried this, that, and the other course, and got as excited and as anxious as the boys themselves, but time and again just as he would have victory in his very grasp, so to speak, and Tom’s fingers would be twitching to begin, Joe’s pin would deftly head him off, and keep possession. At last Tom could stand it no longer. The temptation was too strong. So he reached out and lent a hand with his pin. Joe was angry in a moment. Said he:

“Tom, you let him alone.”

“I only just want to stir him up a little, Joe.”

“No, sir, it ain’t fair; you just let him alone.”

“Blame it, I ain’t going to stir him much.”

“Let him alone, I tell you.”

“I won’t!”

“You shall—he’s on my side of the line.”

“Look here, Joe Harper, whose is that tick?”

“I don’t care whose tick he is—he’s on my side of the line, and you sha’n’t touch him.”

“Well, I’ll just bet I will, though. He’s my tick and I’ll do what I blame please with him, or die!”

A tremendous whack came down on Tom’s shoulders, and its duplicate on Joe’s; and for the space of two minutes the dust continued to fly from the two jackets and the whole school to enjoy it. The boys had been too absorbed to notice the hush that had stolen upon the school awhile before when the master came tiptoeing down the room and stood over them. He had contemplated a good part of the performance before he contributed his bit of variety to it.

When school broke up at noon, Tom flew to Becky Thatcher, and whispered in her ear:

“Put on your bonnet and let on you’re going home; and when you get to the corner, give the rest of ’em the slip, and turn down through the lane and come back. I’ll go the other way and come it over ’em the same way.”

So the one went off with one group of scholars, and the other with another. In a little while the two met at the bottom of the lane, and when they reached the school they had it all to themselves. Then they sat together, with a slate before them, and Tom gave Becky the pencil and held her hand in his, guiding it, and so created another surprising house. When the interest in art began to wane, the two fell to talking. Tom was swimming in bliss. He said:

“Do you love rats?”

“No! I hate them!”

“Well, I do, too—live ones. But I mean dead ones, to swing round your head with a string.”

“No, I don’t care for rats much, anyway. What I like is chewing-gum.”

“Oh, I should say so! I wish I had some now.”

“Do you? I’ve got some. I’ll let you chew it awhile, but you must give it back to me.”

That was agreeable, so they chewed it turn about, and dangled their legs against the bench in excess of contentment.

“Was you ever at a circus?” said Tom.

“Yes, and my pa’s going to take me again some time, if I’m good.”

“I been to the circus three or four times—lots of times. Church ain’t shucks to a circus. There’s things going on at a circus all the time. I’m going to be a clown in a circus when I grow up.”

“Oh, are you! That will be nice. They’re so lovely, all spotted up.”

“Yes, that’s so. And they get slathers of money—most a dollar a day, Ben Rogers says. Say, Becky, was you ever engaged?”

“What’s that?”

“Why, engaged to be married.”

“No.”

“Would you like to?”

“I reckon so. I don’t know. What is it like?”

“Like? Why it ain’t like anything. You only just tell a boy you won’t ever have anybody but him, ever ever ever, and then you kiss and that’s all. Anybody can do it.”

“Kiss? What do you kiss for?”

“Why, that, you know, is to—well, they always do that.”

“Everybody?”

“Why, yes, everybody that’s in love with each other. Do you remember what I wrote on the slate?”

“Ye—yes.”

“What was it?”

“I sha’n’t tell you.”

“Shall I tell you?”

“Ye—yes—but some other time.”

“No, now.”

“No, not now—to-morrow.”

“Oh, no, now. Please, Becky—I’ll whisper it, I’ll whisper it ever so easy.”

Becky hesitating, Tom took silence for consent, and passed his arm about her waist and whispered the tale ever so softly, with his mouth close to her ear. And then he added:

“Now you whisper it to me—just the same.”

She resisted, for a while, and then said:

“You turn your face away so you can’t see, and then I will. But you mustn’t ever tell anybody—will you, Tom? Now you won’t, will you?”

“No, indeed, indeed I won’t. Now, Becky.”

He turned his face away. She bent timidly around till her breath stirred his curls and whispered, “I—love—you!”

Then she sprang away and ran around and around the desks and benches, with Tom after her, and took refuge in a corner at last, with her little white apron to her face. Tom clasped her about her neck and pleaded:

“Now, Becky, it’s all done—all over but the kiss. Don’t you be afraid of that—it ain’t anything at all. Please, Becky.” And he tugged at her apron and the hands.

By and by she gave up, and let her hands drop; her face, all glowing with the struggle, came up and submitted. Tom kissed the red lips and said:

“Now it’s all done, Becky. And always after this, you know, you ain’t ever to love anybody but me, and you ain’t ever to marry anybody but me, ever never and forever. Will you?”

“No, I’ll never love anybody but you, Tom, and I’ll never marry anybody but you—and you ain’t to ever marry anybody but me, either.”

“Certainly. Of course. That’s part of it. And always coming to school or when we’re going home, you’re to walk with me, when there ain’t anybody looking—and you choose me and I choose you at parties, because that’s the way you do when you’re engaged.”

“It’s so nice. I never heard of it before.”

“Oh, it’s ever so gay! Why, me and Amy Lawrence—”

The big eyes told Tom his blunder and he stopped, confused.

“Oh, Tom! Then I ain’t the first you’ve ever been engaged to!”

The child began to cry. Tom said:

“Oh, don’t cry, Becky, I don’t care for her any more.”

“Yes, you do, Tom—you know you do.”
THE harder Tom tried to fasten his mind on his book, the more his ideas wandered. So at last, with a sigh and a yawn, he gave it up. It seemed to him that the noon recess would never come. The air was utterly dead. There was not a breath stirring. It was the sleepiest of sleepy days. The drowsing murmur of the five and twenty studying scholars soothed the soul like the spell that is in the murmur of bees. Away off in the flaming sunshine, Cardiff Hill lifted its soft green sides through a shimmering veil of heat, tinted with the purple of distance; a few birds floated on lazy wing high in the air; no other living thing was visible but some cows, and they were asleep. Tom’s heart ached to be free, or else to have something of interest to do to pass the dreary time. His hand wandered into his pocket and his face lit up with a glow of gratitude that was prayer, though he did not know it. Then furtively the percussion-cap box came out. He released the tick and put him on the long flat desk. The creature probably glowed with a gratitude that amounted to prayer, too, at this moment, but it was premature: for when he started thankfully to travel off, Tom turned him aside with a pin and made him take a new direction.

Tom’s bosom friend sat next him, suffering just as Tom had been, and now he was deeply and gratefully interested in this entertainment in an instant. This bosom friend was Joe Harper. The two boys were sworn friends all the week, and embattled enemies on Saturdays. Joe took a pin out of his lapel and began to assist in exercising the prisoner. The sport grew in interest momently. Soon Tom said that they were interfering with each other, and neither getting the fullest benefit of the tick. So he put Joe’s slate on the desk and drew a line down the middle of it from top to bottom.

“Now,” said he, “as long as he is on your side you can stir him up and I’ll let him alone; but if you let him get away and get on my side, you’re to leave him alone as long as I can keep him from crossing over.”

“All right, go ahead; start him up.”

The tick escaped from Tom, presently, and crossed the equator. Joe harassed him awhile, and then he got away and crossed back again. This change of base occurred often. While one boy was worrying the tick with absorbing interest, the other would look on with interest as strong, the two heads bowed together over the slate, and the two souls dead to all things else. At last luck seemed to settle and abide with Joe. The tick tried this, that, and the other course, and got as excited and as anxious as the boys themselves, but time and again just as he would have victory in his very grasp, so to speak, and Tom’s fingers would be twitching to begin, Joe’s pin would deftly head him off, and keep possession. At last Tom could stand it no longer. The temptation was too strong. So he reached out and lent a hand with his pin. Joe was angry in a moment. Said he:

“Tom, you let him alone.”

“I only just want to stir him up a little, Joe.”

“No, sir, it ain’t fair; you just let him alone.”

“Blame it, I ain’t going to stir him much.”

“Let him alone, I tell you.”

“I won’t!”

“You shall—he’s on my side of the line.”

“Look here, Joe Harper, whose is that tick?”

“I don’t care whose tick he is—he’s on my side of the line, and you sha’n’t touch him.”

“Well, I’ll just bet I will, though. He’s my tick and I’ll do what I blame please with him, or die!”

A tremendous whack came down on Tom’s shoulders, and its duplicate on Joe’s; and for the space of two minutes the dust continued to fly from the two jackets and the whole school to enjoy it. The boys had been too absorbed to notice the hush that had stolen upon the school awhile before when the master came tiptoeing down the room and stood over them. He had contemplated a good part of the performance before he contributed his bit of variety to it.

When school broke up at noon, Tom flew to Becky Thatcher, and whispered in her ear:

“Put on your bonnet and let on you’re going home; and when you get to the corner, give the rest of ’em the slip, and turn down through the lane and come back. I’ll go the other way and come it over ’em the same way.”

So the one went off with one group of scholars, and the other with another. In a little while the two met at the bottom of the lane, and when they reached the school they had it all to themselves. Then they sat together, with a slate before them, and Tom gave Becky the pencil and held her hand in his, guiding it, and so created another surprising house. When the interest in art began to wane, the two fell to talking. Tom was swimming in bliss. He said:

“Do you love rats?”

“No! I hate them!”

“Well, I do, too—live ones. But I mean dead ones, to swing round your head with a string.”

“No, I don’t care for rats much, anyway. What I like is chewing-gum.”

“Oh, I should say so! I wish I had some now.”

“Do you? I’ve got some. I’ll let you chew it awhile, but you must give it back to me.”

That was agreeable, so they chewed it turn about, and dangled their legs against the bench in excess of contentment.

“Was you ever at a circus?” said Tom.

“Yes, and my pa’s going to take me again some time, if I’m good.”

“I been to the circus three or four times—lots of times. Church ain’t shucks to a circus. There’s things going on at a circus all the time. I’m going to be a clown in a circus when I grow up.”

“Oh, are you! That will be nice. They’re so lovely, all spotted up.”

“Yes, that’s so. And they get slathers of money—most a dollar a day, Ben Rogers says. Say, Becky, was you ever engaged?”

“What’s that?”

“Why, engaged to be married.”

“No.”

“Would you like to?”

“I reckon so. I don’t know. What is it like?”

“Like? Why it ain’t like anything. You only just tell a boy you won’t ever have anybody but him, ever ever ever, and then you kiss and that’s all. Anybody can do it.”

“Kiss? What do you kiss for?”

“Why, that, you know, is to—well, they always do that.”

“Everybody?”

“Why, yes, everybody that’s in love with each other. Do you remember what I wrote on the slate?”

“Ye—yes.”

“What was it?”

“I sha’n’t tell you.”

“Shall I tell you?”

“Ye—yes—but some other time.”

“No, now.”

“No, not now—to-morrow.”

“Oh, no, now. Please, Becky—I’ll whisper it, I’ll whisper it ever so easy.”

Becky hesitating, Tom took silence for consent, and passed his arm about her waist and whispered the tale ever so softly, with his mouth close to her ear. And then he added:

“Now you whisper it to me—just the same.”

She resisted, for a while, and then said:

“You turn your face away so you can’t see, and then I will. But you mustn’t ever tell anybody—will you, Tom? Now you won’t, will you?”

“No, indeed, indeed I won’t. Now, Becky.”

He turned his face away. She bent timidly around till her breath stirred his curls and whispered, “I—love—you!”

Then she sprang away and ran around and around the desks and benches, with Tom after her, and took refuge in a corner at last, with her little white apron to her face. Tom clasped her about her neck and pleaded:

“Now, Becky, it’s all done—all over but the kiss. Don’t you be afraid of that—it ain’t anything at all. Please, Becky.” And he tugged at her apron and the hands.

By and by she gave up, and let her hands drop; her face, all glowing with the struggle, came up and submitted. Tom kissed the red lips and said:

“Now it’s all done, Becky. And always after this, you know, you ain’t ever to love anybody but me, and you ain’t ever to marry anybody but me, ever never and forever. Will you?”

“No, I’ll never love anybody but you, Tom, and I’ll never marry anybody but you—and you ain’t to ever marry anybody but me, either.”

“Certainly. Of course. That’s part of it. And always coming to school or when we’re going home, you’re to walk with me, when there ain’t anybody looking—and you choose me and I choose you at parties, because that’s the way you do when you’re engaged.”

“It’s so nice. I never heard of it before.”

“Oh, it’s ever so gay! Why, me and Amy Lawrence—”

The big eyes told Tom his blunder and he stopped, confused.

“Oh, Tom! Then I ain’t the first you’ve ever been engaged to!”

The child began to cry. Tom said:

“Oh, don’t cry, Becky, I don’t care for her any more.”

“Yes, you do, Tom—you know you do.”";
        var q = decoder.Decode(str);
        GD.Print(q);
    }

    public override void _ExitTree()
    {
    }
}
#endif
